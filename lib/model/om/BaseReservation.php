<?php

/**
 * Base class that represents a row from the 'Reservation' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 19/12/2012 10:11:01
 *
 * @package    lib.model.om
 */
abstract class BaseReservation extends BaseObject  implements Persistent {


  const PEER = 'ReservationPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ReservationPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the roomprofile_id field.
	 * @var        int
	 */
	protected $roomprofile_id;

	/**
	 * The value for the activity_id field.
	 * @var        int
	 */
	protected $activity_id;

	/**
	 * The value for the date field.
	 * @var        string
	 */
	protected $date;

	/**
	 * The value for the duration field.
	 * Note: this column has a database default value of: 60
	 * @var        int
	 */
	protected $duration;

	/**
	 * The value for the is_activated field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $is_activated;

	/**
	 * The value for the reservationreason_id field.
	 * @var        int
	 */
	protected $reservationreason_id;

	/**
	 * The value for the comment field.
	 * @var        string
	 */
	protected $comment;

	/**
	 * The value for the usergroup_id field.
	 * @var        int
	 */
	protected $usergroup_id;

	/**
	 * The value for the card_id field.
	 * @var        int
	 */
	protected $card_id;

	/**
	 * The value for the user_id field.
	 * @var        int
	 */
	protected $user_id;

	/**
	 * The value for the reservationparent_id field.
	 * @var        int
	 */
	protected $reservationparent_id;

	/**
	 * The value for the members_count field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $members_count;

	/**
	 * The value for the guests_count field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $guests_count;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the status field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $status;

	/**
	 * The value for the price field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $price;

	/**
	 * The value for the custom_1 field.
	 * @var        string
	 */
	protected $custom_1;

	/**
	 * The value for the custom_2 field.
	 * @var        string
	 */
	protected $custom_2;

	/**
	 * The value for the custom_3 field.
	 * @var        string
	 */
	protected $custom_3;

	/**
	 * @var        Roomprofile
	 */
	protected $aRoomprofile;

	/**
	 * @var        Activity
	 */
	protected $aActivity;

	/**
	 * @var        Reservationreason
	 */
	protected $aReservationreason;

	/**
	 * @var        Usergroup
	 */
	protected $aUsergroup;

	/**
	 * @var        Card
	 */
	protected $aCard;

	/**
	 * @var        User
	 */
	protected $aUser;

	/**
	 * @var        Reservation
	 */
	protected $aReservationRelatedByReservationparentId;

	/**
	 * @var        array Reservation[] Collection to store aggregation of Reservation objects.
	 */
	protected $collReservationsRelatedByReservationparentId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collReservationsRelatedByReservationparentId.
	 */
	private $lastReservationRelatedByReservationparentIdCriteria = null;

	/**
	 * @var        array ReservationOtherMembers[] Collection to store aggregation of ReservationOtherMembers objects.
	 */
	protected $collReservationOtherMemberss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collReservationOtherMemberss.
	 */
	private $lastReservationOtherMembersCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseReservation object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->duration = 60;
		$this->is_activated = 1;
		$this->members_count = 0;
		$this->guests_count = 0;
		$this->status = 0;
		$this->price = 0;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [roomprofile_id] column value.
	 * 
	 * @return     int
	 */
	public function getRoomprofileId()
	{
		return $this->roomprofile_id;
	}

	/**
	 * Get the [activity_id] column value.
	 * 
	 * @return     int
	 */
	public function getActivityId()
	{
		return $this->activity_id;
	}

	/**
	 * Get the [optionally formatted] temporal [date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDate($format = 'Y-m-d H:i:s')
	{
		if ($this->date === null) {
			return null;
		}


		if ($this->date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [duration] column value.
	 * 
	 * @return     int
	 */
	public function getDuration()
	{
		return $this->duration;
	}

	/**
	 * Get the [is_activated] column value.
	 * 
	 * @return     int
	 */
	public function getIsActivated()
	{
		return $this->is_activated;
	}

	/**
	 * Get the [reservationreason_id] column value.
	 * 
	 * @return     int
	 */
	public function getReservationreasonId()
	{
		return $this->reservationreason_id;
	}

	/**
	 * Get the [comment] column value.
	 * 
	 * @return     string
	 */
	public function getComment()
	{
		return $this->comment;
	}

	/**
	 * Get the [usergroup_id] column value.
	 * 
	 * @return     int
	 */
	public function getUsergroupId()
	{
		return $this->usergroup_id;
	}

	/**
	 * Get the [card_id] column value.
	 * 
	 * @return     int
	 */
	public function getCardId()
	{
		return $this->card_id;
	}

	/**
	 * Get the [user_id] column value.
	 * 
	 * @return     int
	 */
	public function getUserId()
	{
		return $this->user_id;
	}

	/**
	 * Get the [reservationparent_id] column value.
	 * 
	 * @return     int
	 */
	public function getReservationparentId()
	{
		return $this->reservationparent_id;
	}

	/**
	 * Get the [members_count] column value.
	 * 
	 * @return     int
	 */
	public function getMembersCount()
	{
		return $this->members_count;
	}

	/**
	 * Get the [guests_count] column value.
	 * 
	 * @return     int
	 */
	public function getGuestsCount()
	{
		return $this->guests_count;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     int
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Get the [price] column value.
	 * 
	 * @return     int
	 */
	public function getPrice()
	{
		return $this->price;
	}

	/**
	 * Get the [custom_1] column value.
	 * 
	 * @return     string
	 */
	public function getCustom1()
	{
		return $this->custom_1;
	}

	/**
	 * Get the [custom_2] column value.
	 * 
	 * @return     string
	 */
	public function getCustom2()
	{
		return $this->custom_2;
	}

	/**
	 * Get the [custom_3] column value.
	 * 
	 * @return     string
	 */
	public function getCustom3()
	{
		return $this->custom_3;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ReservationPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [roomprofile_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setRoomprofileId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->roomprofile_id !== $v) {
			$this->roomprofile_id = $v;
			$this->modifiedColumns[] = ReservationPeer::ROOMPROFILE_ID;
		}

		if ($this->aRoomprofile !== null && $this->aRoomprofile->getId() !== $v) {
			$this->aRoomprofile = null;
		}

		return $this;
	} // setRoomprofileId()

	/**
	 * Set the value of [activity_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setActivityId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->activity_id !== $v) {
			$this->activity_id = $v;
			$this->modifiedColumns[] = ReservationPeer::ACTIVITY_ID;
		}

		if ($this->aActivity !== null && $this->aActivity->getId() !== $v) {
			$this->aActivity = null;
		}

		return $this;
	} // setActivityId()

	/**
	 * Sets the value of [date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date !== null && $tmpDt = new DateTime($this->date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ReservationPeer::DATE;
			}
		} // if either are not null

		return $this;
	} // setDate()

	/**
	 * Set the value of [duration] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setDuration($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->duration !== $v || $v === 60) {
			$this->duration = $v;
			$this->modifiedColumns[] = ReservationPeer::DURATION;
		}

		return $this;
	} // setDuration()

	/**
	 * Set the value of [is_activated] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setIsActivated($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->is_activated !== $v || $v === 1) {
			$this->is_activated = $v;
			$this->modifiedColumns[] = ReservationPeer::IS_ACTIVATED;
		}

		return $this;
	} // setIsActivated()

	/**
	 * Set the value of [reservationreason_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setReservationreasonId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->reservationreason_id !== $v) {
			$this->reservationreason_id = $v;
			$this->modifiedColumns[] = ReservationPeer::RESERVATIONREASON_ID;
		}

		if ($this->aReservationreason !== null && $this->aReservationreason->getId() !== $v) {
			$this->aReservationreason = null;
		}

		return $this;
	} // setReservationreasonId()

	/**
	 * Set the value of [comment] column.
	 * 
	 * @param      string $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comment !== $v) {
			$this->comment = $v;
			$this->modifiedColumns[] = ReservationPeer::COMMENT;
		}

		return $this;
	} // setComment()

	/**
	 * Set the value of [usergroup_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setUsergroupId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usergroup_id !== $v) {
			$this->usergroup_id = $v;
			$this->modifiedColumns[] = ReservationPeer::USERGROUP_ID;
		}

		if ($this->aUsergroup !== null && $this->aUsergroup->getId() !== $v) {
			$this->aUsergroup = null;
		}

		return $this;
	} // setUsergroupId()

	/**
	 * Set the value of [card_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setCardId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->card_id !== $v) {
			$this->card_id = $v;
			$this->modifiedColumns[] = ReservationPeer::CARD_ID;
		}

		if ($this->aCard !== null && $this->aCard->getId() !== $v) {
			$this->aCard = null;
		}

		return $this;
	} // setCardId()

	/**
	 * Set the value of [user_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setUserId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_id !== $v) {
			$this->user_id = $v;
			$this->modifiedColumns[] = ReservationPeer::USER_ID;
		}

		if ($this->aUser !== null && $this->aUser->getId() !== $v) {
			$this->aUser = null;
		}

		return $this;
	} // setUserId()

	/**
	 * Set the value of [reservationparent_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setReservationparentId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->reservationparent_id !== $v) {
			$this->reservationparent_id = $v;
			$this->modifiedColumns[] = ReservationPeer::RESERVATIONPARENT_ID;
		}

		if ($this->aReservationRelatedByReservationparentId !== null && $this->aReservationRelatedByReservationparentId->getId() !== $v) {
			$this->aReservationRelatedByReservationparentId = null;
		}

		return $this;
	} // setReservationparentId()

	/**
	 * Set the value of [members_count] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setMembersCount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->members_count !== $v || $v === 0) {
			$this->members_count = $v;
			$this->modifiedColumns[] = ReservationPeer::MEMBERS_COUNT;
		}

		return $this;
	} // setMembersCount()

	/**
	 * Set the value of [guests_count] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setGuestsCount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->guests_count !== $v || $v === 0) {
			$this->guests_count = $v;
			$this->modifiedColumns[] = ReservationPeer::GUESTS_COUNT;
		}

		return $this;
	} // setGuestsCount()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ReservationPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ReservationPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->status !== $v || $v === 0) {
			$this->status = $v;
			$this->modifiedColumns[] = ReservationPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Set the value of [price] column.
	 * 
	 * @param      int $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setPrice($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->price !== $v || $v === 0) {
			$this->price = $v;
			$this->modifiedColumns[] = ReservationPeer::PRICE;
		}

		return $this;
	} // setPrice()

	/**
	 * Set the value of [custom_1] column.
	 * 
	 * @param      string $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setCustom1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom_1 !== $v) {
			$this->custom_1 = $v;
			$this->modifiedColumns[] = ReservationPeer::CUSTOM_1;
		}

		return $this;
	} // setCustom1()

	/**
	 * Set the value of [custom_2] column.
	 * 
	 * @param      string $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setCustom2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom_2 !== $v) {
			$this->custom_2 = $v;
			$this->modifiedColumns[] = ReservationPeer::CUSTOM_2;
		}

		return $this;
	} // setCustom2()

	/**
	 * Set the value of [custom_3] column.
	 * 
	 * @param      string $v new value
	 * @return     Reservation The current object (for fluent API support)
	 */
	public function setCustom3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->custom_3 !== $v) {
			$this->custom_3 = $v;
			$this->modifiedColumns[] = ReservationPeer::CUSTOM_3;
		}

		return $this;
	} // setCustom3()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(ReservationPeer::DURATION,ReservationPeer::IS_ACTIVATED,ReservationPeer::MEMBERS_COUNT,ReservationPeer::GUESTS_COUNT,ReservationPeer::STATUS,ReservationPeer::PRICE))) {
				return false;
			}

			if ($this->duration !== 60) {
				return false;
			}

			if ($this->is_activated !== 1) {
				return false;
			}

			if ($this->members_count !== 0) {
				return false;
			}

			if ($this->guests_count !== 0) {
				return false;
			}

			if ($this->status !== 0) {
				return false;
			}

			if ($this->price !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->roomprofile_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->activity_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->date = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->duration = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->is_activated = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->reservationreason_id = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->comment = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->usergroup_id = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->card_id = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->user_id = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->reservationparent_id = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->members_count = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->guests_count = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->created_at = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->updated_at = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->status = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->price = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->custom_1 = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->custom_2 = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->custom_3 = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 21; // 21 = ReservationPeer::NUM_COLUMNS - ReservationPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Reservation object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aRoomprofile !== null && $this->roomprofile_id !== $this->aRoomprofile->getId()) {
			$this->aRoomprofile = null;
		}
		if ($this->aActivity !== null && $this->activity_id !== $this->aActivity->getId()) {
			$this->aActivity = null;
		}
		if ($this->aReservationreason !== null && $this->reservationreason_id !== $this->aReservationreason->getId()) {
			$this->aReservationreason = null;
		}
		if ($this->aUsergroup !== null && $this->usergroup_id !== $this->aUsergroup->getId()) {
			$this->aUsergroup = null;
		}
		if ($this->aCard !== null && $this->card_id !== $this->aCard->getId()) {
			$this->aCard = null;
		}
		if ($this->aUser !== null && $this->user_id !== $this->aUser->getId()) {
			$this->aUser = null;
		}
		if ($this->aReservationRelatedByReservationparentId !== null && $this->reservationparent_id !== $this->aReservationRelatedByReservationparentId->getId()) {
			$this->aReservationRelatedByReservationparentId = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ReservationPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ReservationPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aRoomprofile = null;
			$this->aActivity = null;
			$this->aReservationreason = null;
			$this->aUsergroup = null;
			$this->aCard = null;
			$this->aUser = null;
			$this->aReservationRelatedByReservationparentId = null;
			$this->collReservationsRelatedByReservationparentId = null;
			$this->lastReservationRelatedByReservationparentIdCriteria = null;

			$this->collReservationOtherMemberss = null;
			$this->lastReservationOtherMembersCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseReservation:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ReservationPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			ReservationPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseReservation:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseReservation:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(ReservationPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(ReservationPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ReservationPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseReservation:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			ReservationPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRoomprofile !== null) {
				if ($this->aRoomprofile->isModified() || $this->aRoomprofile->isNew()) {
					$affectedRows += $this->aRoomprofile->save($con);
				}
				$this->setRoomprofile($this->aRoomprofile);
			}

			if ($this->aActivity !== null) {
				if ($this->aActivity->isModified() || $this->aActivity->isNew()) {
					$affectedRows += $this->aActivity->save($con);
				}
				$this->setActivity($this->aActivity);
			}

			if ($this->aReservationreason !== null) {
				if ($this->aReservationreason->isModified() || $this->aReservationreason->isNew()) {
					$affectedRows += $this->aReservationreason->save($con);
				}
				$this->setReservationreason($this->aReservationreason);
			}

			if ($this->aUsergroup !== null) {
				if ($this->aUsergroup->isModified() || $this->aUsergroup->isNew()) {
					$affectedRows += $this->aUsergroup->save($con);
				}
				$this->setUsergroup($this->aUsergroup);
			}

			if ($this->aCard !== null) {
				if ($this->aCard->isModified() || $this->aCard->isNew()) {
					$affectedRows += $this->aCard->save($con);
				}
				$this->setCard($this->aCard);
			}

			if ($this->aUser !== null) {
				if ($this->aUser->isModified() || $this->aUser->isNew()) {
					$affectedRows += $this->aUser->save($con);
				}
				$this->setUser($this->aUser);
			}

			if ($this->aReservationRelatedByReservationparentId !== null) {
				if ($this->aReservationRelatedByReservationparentId->isModified() || $this->aReservationRelatedByReservationparentId->isNew()) {
					$affectedRows += $this->aReservationRelatedByReservationparentId->save($con);
				}
				$this->setReservationRelatedByReservationparentId($this->aReservationRelatedByReservationparentId);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ReservationPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ReservationPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ReservationPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collReservationsRelatedByReservationparentId !== null) {
				foreach ($this->collReservationsRelatedByReservationparentId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collReservationOtherMemberss !== null) {
				foreach ($this->collReservationOtherMemberss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRoomprofile !== null) {
				if (!$this->aRoomprofile->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRoomprofile->getValidationFailures());
				}
			}

			if ($this->aActivity !== null) {
				if (!$this->aActivity->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aActivity->getValidationFailures());
				}
			}

			if ($this->aReservationreason !== null) {
				if (!$this->aReservationreason->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aReservationreason->getValidationFailures());
				}
			}

			if ($this->aUsergroup !== null) {
				if (!$this->aUsergroup->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsergroup->getValidationFailures());
				}
			}

			if ($this->aCard !== null) {
				if (!$this->aCard->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCard->getValidationFailures());
				}
			}

			if ($this->aUser !== null) {
				if (!$this->aUser->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUser->getValidationFailures());
				}
			}

			if ($this->aReservationRelatedByReservationparentId !== null) {
				if (!$this->aReservationRelatedByReservationparentId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aReservationRelatedByReservationparentId->getValidationFailures());
				}
			}


			if (($retval = ReservationPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collReservationsRelatedByReservationparentId !== null) {
					foreach ($this->collReservationsRelatedByReservationparentId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collReservationOtherMemberss !== null) {
					foreach ($this->collReservationOtherMemberss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ReservationPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getRoomprofileId();
				break;
			case 2:
				return $this->getActivityId();
				break;
			case 3:
				return $this->getDate();
				break;
			case 4:
				return $this->getDuration();
				break;
			case 5:
				return $this->getIsActivated();
				break;
			case 6:
				return $this->getReservationreasonId();
				break;
			case 7:
				return $this->getComment();
				break;
			case 8:
				return $this->getUsergroupId();
				break;
			case 9:
				return $this->getCardId();
				break;
			case 10:
				return $this->getUserId();
				break;
			case 11:
				return $this->getReservationparentId();
				break;
			case 12:
				return $this->getMembersCount();
				break;
			case 13:
				return $this->getGuestsCount();
				break;
			case 14:
				return $this->getCreatedAt();
				break;
			case 15:
				return $this->getUpdatedAt();
				break;
			case 16:
				return $this->getStatus();
				break;
			case 17:
				return $this->getPrice();
				break;
			case 18:
				return $this->getCustom1();
				break;
			case 19:
				return $this->getCustom2();
				break;
			case 20:
				return $this->getCustom3();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ReservationPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getRoomprofileId(),
			$keys[2] => $this->getActivityId(),
			$keys[3] => $this->getDate(),
			$keys[4] => $this->getDuration(),
			$keys[5] => $this->getIsActivated(),
			$keys[6] => $this->getReservationreasonId(),
			$keys[7] => $this->getComment(),
			$keys[8] => $this->getUsergroupId(),
			$keys[9] => $this->getCardId(),
			$keys[10] => $this->getUserId(),
			$keys[11] => $this->getReservationparentId(),
			$keys[12] => $this->getMembersCount(),
			$keys[13] => $this->getGuestsCount(),
			$keys[14] => $this->getCreatedAt(),
			$keys[15] => $this->getUpdatedAt(),
			$keys[16] => $this->getStatus(),
			$keys[17] => $this->getPrice(),
			$keys[18] => $this->getCustom1(),
			$keys[19] => $this->getCustom2(),
			$keys[20] => $this->getCustom3(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ReservationPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setRoomprofileId($value);
				break;
			case 2:
				$this->setActivityId($value);
				break;
			case 3:
				$this->setDate($value);
				break;
			case 4:
				$this->setDuration($value);
				break;
			case 5:
				$this->setIsActivated($value);
				break;
			case 6:
				$this->setReservationreasonId($value);
				break;
			case 7:
				$this->setComment($value);
				break;
			case 8:
				$this->setUsergroupId($value);
				break;
			case 9:
				$this->setCardId($value);
				break;
			case 10:
				$this->setUserId($value);
				break;
			case 11:
				$this->setReservationparentId($value);
				break;
			case 12:
				$this->setMembersCount($value);
				break;
			case 13:
				$this->setGuestsCount($value);
				break;
			case 14:
				$this->setCreatedAt($value);
				break;
			case 15:
				$this->setUpdatedAt($value);
				break;
			case 16:
				$this->setStatus($value);
				break;
			case 17:
				$this->setPrice($value);
				break;
			case 18:
				$this->setCustom1($value);
				break;
			case 19:
				$this->setCustom2($value);
				break;
			case 20:
				$this->setCustom3($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ReservationPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setRoomprofileId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setActivityId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setDate($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setDuration($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setIsActivated($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setReservationreasonId($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setComment($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setUsergroupId($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCardId($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setUserId($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setReservationparentId($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setMembersCount($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setGuestsCount($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCreatedAt($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setUpdatedAt($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setStatus($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setPrice($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCustom1($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCustom2($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCustom3($arr[$keys[20]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ReservationPeer::DATABASE_NAME);

		if ($this->isColumnModified(ReservationPeer::ID)) $criteria->add(ReservationPeer::ID, $this->id);
		if ($this->isColumnModified(ReservationPeer::ROOMPROFILE_ID)) $criteria->add(ReservationPeer::ROOMPROFILE_ID, $this->roomprofile_id);
		if ($this->isColumnModified(ReservationPeer::ACTIVITY_ID)) $criteria->add(ReservationPeer::ACTIVITY_ID, $this->activity_id);
		if ($this->isColumnModified(ReservationPeer::DATE)) $criteria->add(ReservationPeer::DATE, $this->date);
		if ($this->isColumnModified(ReservationPeer::DURATION)) $criteria->add(ReservationPeer::DURATION, $this->duration);
		if ($this->isColumnModified(ReservationPeer::IS_ACTIVATED)) $criteria->add(ReservationPeer::IS_ACTIVATED, $this->is_activated);
		if ($this->isColumnModified(ReservationPeer::RESERVATIONREASON_ID)) $criteria->add(ReservationPeer::RESERVATIONREASON_ID, $this->reservationreason_id);
		if ($this->isColumnModified(ReservationPeer::COMMENT)) $criteria->add(ReservationPeer::COMMENT, $this->comment);
		if ($this->isColumnModified(ReservationPeer::USERGROUP_ID)) $criteria->add(ReservationPeer::USERGROUP_ID, $this->usergroup_id);
		if ($this->isColumnModified(ReservationPeer::CARD_ID)) $criteria->add(ReservationPeer::CARD_ID, $this->card_id);
		if ($this->isColumnModified(ReservationPeer::USER_ID)) $criteria->add(ReservationPeer::USER_ID, $this->user_id);
		if ($this->isColumnModified(ReservationPeer::RESERVATIONPARENT_ID)) $criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->reservationparent_id);
		if ($this->isColumnModified(ReservationPeer::MEMBERS_COUNT)) $criteria->add(ReservationPeer::MEMBERS_COUNT, $this->members_count);
		if ($this->isColumnModified(ReservationPeer::GUESTS_COUNT)) $criteria->add(ReservationPeer::GUESTS_COUNT, $this->guests_count);
		if ($this->isColumnModified(ReservationPeer::CREATED_AT)) $criteria->add(ReservationPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(ReservationPeer::UPDATED_AT)) $criteria->add(ReservationPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(ReservationPeer::STATUS)) $criteria->add(ReservationPeer::STATUS, $this->status);
		if ($this->isColumnModified(ReservationPeer::PRICE)) $criteria->add(ReservationPeer::PRICE, $this->price);
		if ($this->isColumnModified(ReservationPeer::CUSTOM_1)) $criteria->add(ReservationPeer::CUSTOM_1, $this->custom_1);
		if ($this->isColumnModified(ReservationPeer::CUSTOM_2)) $criteria->add(ReservationPeer::CUSTOM_2, $this->custom_2);
		if ($this->isColumnModified(ReservationPeer::CUSTOM_3)) $criteria->add(ReservationPeer::CUSTOM_3, $this->custom_3);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ReservationPeer::DATABASE_NAME);

		$criteria->add(ReservationPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Reservation (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setRoomprofileId($this->roomprofile_id);

		$copyObj->setActivityId($this->activity_id);

		$copyObj->setDate($this->date);

		$copyObj->setDuration($this->duration);

		$copyObj->setIsActivated($this->is_activated);

		$copyObj->setReservationreasonId($this->reservationreason_id);

		$copyObj->setComment($this->comment);

		$copyObj->setUsergroupId($this->usergroup_id);

		$copyObj->setCardId($this->card_id);

		$copyObj->setUserId($this->user_id);

		$copyObj->setReservationparentId($this->reservationparent_id);

		$copyObj->setMembersCount($this->members_count);

		$copyObj->setGuestsCount($this->guests_count);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setStatus($this->status);

		$copyObj->setPrice($this->price);

		$copyObj->setCustom1($this->custom_1);

		$copyObj->setCustom2($this->custom_2);

		$copyObj->setCustom3($this->custom_3);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getReservationsRelatedByReservationparentId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addReservationRelatedByReservationparentId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getReservationOtherMemberss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addReservationOtherMembers($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Reservation Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ReservationPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ReservationPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Roomprofile object.
	 *
	 * @param      Roomprofile $v
	 * @return     Reservation The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setRoomprofile(Roomprofile $v = null)
	{
		if ($v === null) {
			$this->setRoomprofileId(NULL);
		} else {
			$this->setRoomprofileId($v->getId());
		}

		$this->aRoomprofile = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Roomprofile object, it will not be re-added.
		if ($v !== null) {
			$v->addReservation($this);
		}

		return $this;
	}


	/**
	 * Get the associated Roomprofile object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Roomprofile The associated Roomprofile object.
	 * @throws     PropelException
	 */
	public function getRoomprofile(PropelPDO $con = null)
	{
		if ($this->aRoomprofile === null && ($this->roomprofile_id !== null)) {
			$c = new Criteria(RoomprofilePeer::DATABASE_NAME);
			$c->add(RoomprofilePeer::ID, $this->roomprofile_id);
			$this->aRoomprofile = RoomprofilePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aRoomprofile->addReservations($this);
			 */
		}
		return $this->aRoomprofile;
	}

	/**
	 * Declares an association between this object and a Activity object.
	 *
	 * @param      Activity $v
	 * @return     Reservation The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setActivity(Activity $v = null)
	{
		if ($v === null) {
			$this->setActivityId(NULL);
		} else {
			$this->setActivityId($v->getId());
		}

		$this->aActivity = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Activity object, it will not be re-added.
		if ($v !== null) {
			$v->addReservation($this);
		}

		return $this;
	}


	/**
	 * Get the associated Activity object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Activity The associated Activity object.
	 * @throws     PropelException
	 */
	public function getActivity(PropelPDO $con = null)
	{
		if ($this->aActivity === null && ($this->activity_id !== null)) {
			$c = new Criteria(ActivityPeer::DATABASE_NAME);
			$c->add(ActivityPeer::ID, $this->activity_id);
			$this->aActivity = ActivityPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aActivity->addReservations($this);
			 */
		}
		return $this->aActivity;
	}

	/**
	 * Declares an association between this object and a Reservationreason object.
	 *
	 * @param      Reservationreason $v
	 * @return     Reservation The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setReservationreason(Reservationreason $v = null)
	{
		if ($v === null) {
			$this->setReservationreasonId(NULL);
		} else {
			$this->setReservationreasonId($v->getId());
		}

		$this->aReservationreason = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Reservationreason object, it will not be re-added.
		if ($v !== null) {
			$v->addReservation($this);
		}

		return $this;
	}


	/**
	 * Get the associated Reservationreason object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Reservationreason The associated Reservationreason object.
	 * @throws     PropelException
	 */
	public function getReservationreason(PropelPDO $con = null)
	{
		if ($this->aReservationreason === null && ($this->reservationreason_id !== null)) {
			$c = new Criteria(ReservationreasonPeer::DATABASE_NAME);
			$c->add(ReservationreasonPeer::ID, $this->reservationreason_id);
			$this->aReservationreason = ReservationreasonPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aReservationreason->addReservations($this);
			 */
		}
		return $this->aReservationreason;
	}

	/**
	 * Declares an association between this object and a Usergroup object.
	 *
	 * @param      Usergroup $v
	 * @return     Reservation The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsergroup(Usergroup $v = null)
	{
		if ($v === null) {
			$this->setUsergroupId(NULL);
		} else {
			$this->setUsergroupId($v->getId());
		}

		$this->aUsergroup = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Usergroup object, it will not be re-added.
		if ($v !== null) {
			$v->addReservation($this);
		}

		return $this;
	}


	/**
	 * Get the associated Usergroup object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Usergroup The associated Usergroup object.
	 * @throws     PropelException
	 */
	public function getUsergroup(PropelPDO $con = null)
	{
		if ($this->aUsergroup === null && ($this->usergroup_id !== null)) {
			$c = new Criteria(UsergroupPeer::DATABASE_NAME);
			$c->add(UsergroupPeer::ID, $this->usergroup_id);
			$this->aUsergroup = UsergroupPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUsergroup->addReservations($this);
			 */
		}
		return $this->aUsergroup;
	}

	/**
	 * Declares an association between this object and a Card object.
	 *
	 * @param      Card $v
	 * @return     Reservation The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCard(Card $v = null)
	{
		if ($v === null) {
			$this->setCardId(NULL);
		} else {
			$this->setCardId($v->getId());
		}

		$this->aCard = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Card object, it will not be re-added.
		if ($v !== null) {
			$v->addReservation($this);
		}

		return $this;
	}


	/**
	 * Get the associated Card object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Card The associated Card object.
	 * @throws     PropelException
	 */
	public function getCard(PropelPDO $con = null)
	{
		if ($this->aCard === null && ($this->card_id !== null)) {
			$c = new Criteria(CardPeer::DATABASE_NAME);
			$c->add(CardPeer::ID, $this->card_id);
			$this->aCard = CardPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCard->addReservations($this);
			 */
		}
		return $this->aCard;
	}

	/**
	 * Declares an association between this object and a User object.
	 *
	 * @param      User $v
	 * @return     Reservation The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUser(User $v = null)
	{
		if ($v === null) {
			$this->setUserId(NULL);
		} else {
			$this->setUserId($v->getId());
		}

		$this->aUser = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the User object, it will not be re-added.
		if ($v !== null) {
			$v->addReservation($this);
		}

		return $this;
	}


	/**
	 * Get the associated User object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     User The associated User object.
	 * @throws     PropelException
	 */
	public function getUser(PropelPDO $con = null)
	{
		if ($this->aUser === null && ($this->user_id !== null)) {
			$c = new Criteria(UserPeer::DATABASE_NAME);
			$c->add(UserPeer::ID, $this->user_id);
			$this->aUser = UserPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUser->addReservations($this);
			 */
		}
		return $this->aUser;
	}

	/**
	 * Declares an association between this object and a Reservation object.
	 *
	 * @param      Reservation $v
	 * @return     Reservation The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setReservationRelatedByReservationparentId(Reservation $v = null)
	{
		if ($v === null) {
			$this->setReservationparentId(NULL);
		} else {
			$this->setReservationparentId($v->getId());
		}

		$this->aReservationRelatedByReservationparentId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Reservation object, it will not be re-added.
		if ($v !== null) {
			$v->addReservationRelatedByReservationparentId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Reservation object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Reservation The associated Reservation object.
	 * @throws     PropelException
	 */
	public function getReservationRelatedByReservationparentId(PropelPDO $con = null)
	{
		if ($this->aReservationRelatedByReservationparentId === null && ($this->reservationparent_id !== null)) {
			$c = new Criteria(ReservationPeer::DATABASE_NAME);
			$c->add(ReservationPeer::ID, $this->reservationparent_id);
			$this->aReservationRelatedByReservationparentId = ReservationPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aReservationRelatedByReservationparentId->addReservationsRelatedByReservationparentId($this);
			 */
		}
		return $this->aReservationRelatedByReservationparentId;
	}

	/**
	 * Clears out the collReservationsRelatedByReservationparentId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addReservationsRelatedByReservationparentId()
	 */
	public function clearReservationsRelatedByReservationparentId()
	{
		$this->collReservationsRelatedByReservationparentId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collReservationsRelatedByReservationparentId collection (array).
	 *
	 * By default this just sets the collReservationsRelatedByReservationparentId collection to an empty array (like clearcollReservationsRelatedByReservationparentId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initReservationsRelatedByReservationparentId()
	{
		$this->collReservationsRelatedByReservationparentId = array();
	}

	/**
	 * Gets an array of Reservation objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Reservation has previously been saved, it will retrieve
	 * related ReservationsRelatedByReservationparentId from storage. If this Reservation is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Reservation[]
	 * @throws     PropelException
	 */
	public function getReservationsRelatedByReservationparentId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ReservationPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collReservationsRelatedByReservationparentId === null) {
			if ($this->isNew()) {
			   $this->collReservationsRelatedByReservationparentId = array();
			} else {

				$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

				ReservationPeer::addSelectColumns($criteria);
				$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

				ReservationPeer::addSelectColumns($criteria);
				if (!isset($this->lastReservationRelatedByReservationparentIdCriteria) || !$this->lastReservationRelatedByReservationparentIdCriteria->equals($criteria)) {
					$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastReservationRelatedByReservationparentIdCriteria = $criteria;
		return $this->collReservationsRelatedByReservationparentId;
	}

	/**
	 * Returns the number of related Reservation objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Reservation objects.
	 * @throws     PropelException
	 */
	public function countReservationsRelatedByReservationparentId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ReservationPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collReservationsRelatedByReservationparentId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

				$count = ReservationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

				if (!isset($this->lastReservationRelatedByReservationparentIdCriteria) || !$this->lastReservationRelatedByReservationparentIdCriteria->equals($criteria)) {
					$count = ReservationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collReservationsRelatedByReservationparentId);
				}
			} else {
				$count = count($this->collReservationsRelatedByReservationparentId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Reservation object to this object
	 * through the Reservation foreign key attribute.
	 *
	 * @param      Reservation $l Reservation
	 * @return     void
	 * @throws     PropelException
	 */
	public function addReservationRelatedByReservationparentId(Reservation $l)
	{
		if ($this->collReservationsRelatedByReservationparentId === null) {
			$this->initReservationsRelatedByReservationparentId();
		}
		if (!in_array($l, $this->collReservationsRelatedByReservationparentId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collReservationsRelatedByReservationparentId, $l);
			$l->setReservationRelatedByReservationparentId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Reservation is new, it will return
	 * an empty collection; or if this Reservation has previously
	 * been saved, it will retrieve related ReservationsRelatedByReservationparentId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Reservation.
	 */
	public function getReservationsRelatedByReservationparentIdJoinRoomprofile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ReservationPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collReservationsRelatedByReservationparentId === null) {
			if ($this->isNew()) {
				$this->collReservationsRelatedByReservationparentId = array();
			} else {

				$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

				$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelectJoinRoomprofile($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

			if (!isset($this->lastReservationRelatedByReservationparentIdCriteria) || !$this->lastReservationRelatedByReservationparentIdCriteria->equals($criteria)) {
				$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelectJoinRoomprofile($criteria, $con, $join_behavior);
			}
		}
		$this->lastReservationRelatedByReservationparentIdCriteria = $criteria;

		return $this->collReservationsRelatedByReservationparentId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Reservation is new, it will return
	 * an empty collection; or if this Reservation has previously
	 * been saved, it will retrieve related ReservationsRelatedByReservationparentId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Reservation.
	 */
	public function getReservationsRelatedByReservationparentIdJoinActivity($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ReservationPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collReservationsRelatedByReservationparentId === null) {
			if ($this->isNew()) {
				$this->collReservationsRelatedByReservationparentId = array();
			} else {

				$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

				$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelectJoinActivity($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

			if (!isset($this->lastReservationRelatedByReservationparentIdCriteria) || !$this->lastReservationRelatedByReservationparentIdCriteria->equals($criteria)) {
				$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelectJoinActivity($criteria, $con, $join_behavior);
			}
		}
		$this->lastReservationRelatedByReservationparentIdCriteria = $criteria;

		return $this->collReservationsRelatedByReservationparentId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Reservation is new, it will return
	 * an empty collection; or if this Reservation has previously
	 * been saved, it will retrieve related ReservationsRelatedByReservationparentId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Reservation.
	 */
	public function getReservationsRelatedByReservationparentIdJoinReservationreason($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ReservationPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collReservationsRelatedByReservationparentId === null) {
			if ($this->isNew()) {
				$this->collReservationsRelatedByReservationparentId = array();
			} else {

				$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

				$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelectJoinReservationreason($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

			if (!isset($this->lastReservationRelatedByReservationparentIdCriteria) || !$this->lastReservationRelatedByReservationparentIdCriteria->equals($criteria)) {
				$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelectJoinReservationreason($criteria, $con, $join_behavior);
			}
		}
		$this->lastReservationRelatedByReservationparentIdCriteria = $criteria;

		return $this->collReservationsRelatedByReservationparentId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Reservation is new, it will return
	 * an empty collection; or if this Reservation has previously
	 * been saved, it will retrieve related ReservationsRelatedByReservationparentId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Reservation.
	 */
	public function getReservationsRelatedByReservationparentIdJoinUsergroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ReservationPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collReservationsRelatedByReservationparentId === null) {
			if ($this->isNew()) {
				$this->collReservationsRelatedByReservationparentId = array();
			} else {

				$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

				$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelectJoinUsergroup($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

			if (!isset($this->lastReservationRelatedByReservationparentIdCriteria) || !$this->lastReservationRelatedByReservationparentIdCriteria->equals($criteria)) {
				$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelectJoinUsergroup($criteria, $con, $join_behavior);
			}
		}
		$this->lastReservationRelatedByReservationparentIdCriteria = $criteria;

		return $this->collReservationsRelatedByReservationparentId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Reservation is new, it will return
	 * an empty collection; or if this Reservation has previously
	 * been saved, it will retrieve related ReservationsRelatedByReservationparentId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Reservation.
	 */
	public function getReservationsRelatedByReservationparentIdJoinCard($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ReservationPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collReservationsRelatedByReservationparentId === null) {
			if ($this->isNew()) {
				$this->collReservationsRelatedByReservationparentId = array();
			} else {

				$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

				$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelectJoinCard($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

			if (!isset($this->lastReservationRelatedByReservationparentIdCriteria) || !$this->lastReservationRelatedByReservationparentIdCriteria->equals($criteria)) {
				$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelectJoinCard($criteria, $con, $join_behavior);
			}
		}
		$this->lastReservationRelatedByReservationparentIdCriteria = $criteria;

		return $this->collReservationsRelatedByReservationparentId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Reservation is new, it will return
	 * an empty collection; or if this Reservation has previously
	 * been saved, it will retrieve related ReservationsRelatedByReservationparentId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Reservation.
	 */
	public function getReservationsRelatedByReservationparentIdJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ReservationPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collReservationsRelatedByReservationparentId === null) {
			if ($this->isNew()) {
				$this->collReservationsRelatedByReservationparentId = array();
			} else {

				$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

				$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ReservationPeer::RESERVATIONPARENT_ID, $this->id);

			if (!isset($this->lastReservationRelatedByReservationparentIdCriteria) || !$this->lastReservationRelatedByReservationparentIdCriteria->equals($criteria)) {
				$this->collReservationsRelatedByReservationparentId = ReservationPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastReservationRelatedByReservationparentIdCriteria = $criteria;

		return $this->collReservationsRelatedByReservationparentId;
	}

	/**
	 * Clears out the collReservationOtherMemberss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addReservationOtherMemberss()
	 */
	public function clearReservationOtherMemberss()
	{
		$this->collReservationOtherMemberss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collReservationOtherMemberss collection (array).
	 *
	 * By default this just sets the collReservationOtherMemberss collection to an empty array (like clearcollReservationOtherMemberss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initReservationOtherMemberss()
	{
		$this->collReservationOtherMemberss = array();
	}

	/**
	 * Gets an array of ReservationOtherMembers objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Reservation has previously been saved, it will retrieve
	 * related ReservationOtherMemberss from storage. If this Reservation is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ReservationOtherMembers[]
	 * @throws     PropelException
	 */
	public function getReservationOtherMemberss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ReservationPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collReservationOtherMemberss === null) {
			if ($this->isNew()) {
			   $this->collReservationOtherMemberss = array();
			} else {

				$criteria->add(ReservationOtherMembersPeer::RESERVATION_ID, $this->id);

				ReservationOtherMembersPeer::addSelectColumns($criteria);
				$this->collReservationOtherMemberss = ReservationOtherMembersPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ReservationOtherMembersPeer::RESERVATION_ID, $this->id);

				ReservationOtherMembersPeer::addSelectColumns($criteria);
				if (!isset($this->lastReservationOtherMembersCriteria) || !$this->lastReservationOtherMembersCriteria->equals($criteria)) {
					$this->collReservationOtherMemberss = ReservationOtherMembersPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastReservationOtherMembersCriteria = $criteria;
		return $this->collReservationOtherMemberss;
	}

	/**
	 * Returns the number of related ReservationOtherMembers objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ReservationOtherMembers objects.
	 * @throws     PropelException
	 */
	public function countReservationOtherMemberss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ReservationPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collReservationOtherMemberss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ReservationOtherMembersPeer::RESERVATION_ID, $this->id);

				$count = ReservationOtherMembersPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ReservationOtherMembersPeer::RESERVATION_ID, $this->id);

				if (!isset($this->lastReservationOtherMembersCriteria) || !$this->lastReservationOtherMembersCriteria->equals($criteria)) {
					$count = ReservationOtherMembersPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collReservationOtherMemberss);
				}
			} else {
				$count = count($this->collReservationOtherMemberss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ReservationOtherMembers object to this object
	 * through the ReservationOtherMembers foreign key attribute.
	 *
	 * @param      ReservationOtherMembers $l ReservationOtherMembers
	 * @return     void
	 * @throws     PropelException
	 */
	public function addReservationOtherMembers(ReservationOtherMembers $l)
	{
		if ($this->collReservationOtherMemberss === null) {
			$this->initReservationOtherMemberss();
		}
		if (!in_array($l, $this->collReservationOtherMemberss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collReservationOtherMemberss, $l);
			$l->setReservation($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Reservation is new, it will return
	 * an empty collection; or if this Reservation has previously
	 * been saved, it will retrieve related ReservationOtherMemberss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Reservation.
	 */
	public function getReservationOtherMemberssJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ReservationPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collReservationOtherMemberss === null) {
			if ($this->isNew()) {
				$this->collReservationOtherMemberss = array();
			} else {

				$criteria->add(ReservationOtherMembersPeer::RESERVATION_ID, $this->id);

				$this->collReservationOtherMemberss = ReservationOtherMembersPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ReservationOtherMembersPeer::RESERVATION_ID, $this->id);

			if (!isset($this->lastReservationOtherMembersCriteria) || !$this->lastReservationOtherMembersCriteria->equals($criteria)) {
				$this->collReservationOtherMemberss = ReservationOtherMembersPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastReservationOtherMembersCriteria = $criteria;

		return $this->collReservationOtherMemberss;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collReservationsRelatedByReservationparentId) {
				foreach ((array) $this->collReservationsRelatedByReservationparentId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collReservationOtherMemberss) {
				foreach ((array) $this->collReservationOtherMemberss as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collReservationsRelatedByReservationparentId = null;
		$this->collReservationOtherMemberss = null;
			$this->aRoomprofile = null;
			$this->aActivity = null;
			$this->aReservationreason = null;
			$this->aUsergroup = null;
			$this->aCard = null;
			$this->aUser = null;
			$this->aReservationRelatedByReservationparentId = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseReservation:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseReservation::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseReservation
